name: RBC

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Install flake8
        run: |
          pip install flake8

      - name: Lint:flake8
        run: |
          flake8 .

  remotejit:
    name: ${{ matrix.os }} - Python v${{ matrix.python-version }} - Numba v${{ matrix.numba-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.8', '3.7']
        numba-version: ['0.55', '0.54']
        include:
          - os: ubuntu-latest
            python-version: '3.10'
            numba-version: '0.55'

    needs: [lint, omniscidb]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python-version }}
          mamba-version: "*"
          channels: conda-forge

      - name: Configure miniconda
        shell: bash -l {0}
        run: |
          conda env config vars set MAMBA_NO_BANNER=1
      - name: Create rbc test environment v${{ matrix.python-version }}
        shell: bash -l {0}
        run: |
          cat .conda/environment.yml > rbc_test.yaml
          echo "  - numba=${{ matrix.numba-version }}" >> rbc_test.yaml
          echo "  - python=${{ matrix.python-version }}" >> rbc_test.yaml
          mamba env create  --file=rbc_test.yaml -n rbc
      - name: rbc conda config
        shell: bash -l {0}
        run: mamba run -n rbc conda config --show

      - name: rbc conda list
        shell: bash -l {0}
        run: |
          mamba run -n rbc conda list

      - name: Develop rbc
        shell: bash -l {0}
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
              # workaround for
              # https://github.com/conda-forge/clangdev-feedstock/issues/96
              export SDKROOT=`xcrun --sdk macosx --show-sdk-path`
          fi
          mamba run -n rbc python setup.py develop
      - name: Run rbc tests
        shell: bash -l {0}
        env:
          EXPECTED_PYTHON_VERSION: ${{ matrix.python-version }}
          EXPECTED_NUMBA_VERSION: ${{ matrix.numba-version }}
        run: |
          mamba run -n rbc pytest -sv -r A rbc/ -x

  omniscidb:
    name: OmnisciDB ${{ matrix.omniscidb-version }} - ${{ matrix.os }} - Numba v${{matrix.numba-version}} - Python v${{ matrix.python-version }} [${{ matrix.omniscidb-from }}]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.9', '3.8', '3.7']
        numba-version: ['0.55', '0.54']
        omniscidb-version: ['5.9', '5.8', '5.7']
        omniscidb-from: [conda]
        include:
          - os: ubuntu-latest
            python-version: '3.10'
            numba-version: '0.55'
            omniscidb-version: dev
            docker-image: omnisci/core-os-cpu-dev:latest
            omniscidb-from: docker
          - os: ubuntu-latest
            python-version: '3.9'
            numba-version: '0.54'
            omniscidb-version: dev
            docker-image: omnisci/core-os-cpu-dev:latest
            omniscidb-from: docker

    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python-version }}
          mamba-version: "*"
          channels: conda-forge

      - name: Configure miniconda
        shell: bash -l {0}
        run: |
          conda env config vars set MAMBA_NO_BANNER=1

      # omniscidb must be run in an environment that is independent of rbc environment
      - name: Install omniscidb v${{ matrix.omniscidb-version }} [conda]
        shell: bash -l {0}
        if: matrix.os == 'ubuntu-latest' && matrix.omniscidb-from == 'conda'
        run: |
          mamba create -n omniscidb-env omniscidb=${{ matrix.omniscidb-version }}*=*_cpu -c conda-forge

      - name: Build Omniscidb docker image and run it [docker]
        shell: bash -l {0}
        env:
          OMNISCIDB_DOCKER_IMAGE: ${{ matrix.docker-image }}
        if: matrix.os == 'ubuntu-latest' && matrix.omniscidb-from == 'docker'
        run: |
          # force docker-compose installation
          mamba create -n docker docker-compose -c conda-forge
          # run docker services
          mamba run -n docker docker-compose build
          mamba run -n docker docker-compose up -d
          sleep 20

      - name: omniscidb-env conda list [conda]
        shell: bash -l {0}
        if: matrix.os == 'ubuntu-latest' && matrix.omniscidb-from == 'conda'
        run: |
          mamba run -n omniscidb-env conda list

      - name: Start Omniscidb [conda]
        shell: bash -l {0}
        if: matrix.os == 'ubuntu-latest' && matrix.omniscidb-from == 'conda'
        run: |
          mkdir data
          mamba run -n omniscidb-env omnisci_initdb data -f
          mamba run -n omniscidb-env omnisci_server --version
          mamba run -n omniscidb-env omnisci_server --enable-runtime-udf --enable-table-functions \> omniscidb-output.txt 2\>\&1 \& echo \$! \> omniscidb.pid
          sleep 10
          cat omniscidb.pid

      - name: Create rbc test environment v${{ matrix.python-version }}
        shell: bash -l {0}
        run: |
          cat .conda/environment.yml > rbc_test.yaml
          echo "  - numba=${{ matrix.numba-version }}" >> rbc_test.yaml
          echo "  - python=${{ matrix.python-version }}" >> rbc_test.yaml
          mamba env create  --file=rbc_test.yaml -n rbc

      - name: rbc conda config
        shell: bash -l {0}
        run: |
          mamba run -n rbc conda config --show

      - name: rbc conda list
        shell: bash -l {0}
        run: |
          mamba run -n rbc conda list

      - name: Develop rbc
        shell: bash -l {0}
        run: |
          mamba run -n rbc python setup.py develop

      - name: Run rbc tests [docker]
        shell: bash -l {0}
        if: matrix.os == 'ubuntu-latest' && matrix.omniscidb-from == 'docker'
        env:
          OMNISCIDB_DEV_LABEL: ${{ 'docker-dev' }}
          EXPECTED_PYTHON_VERSION: ${{ matrix.python-version }}
          EXPECTED_OMNISCIDB_VERSION: ${{ matrix.omniscidb-version }}
          EXPECTED_NUMBA_VERSION: ${{ matrix.numba-version }}
          RBC_TESTS_FULL: TRUE
        run: |
          mamba run -n rbc pytest -sv -r A rbc/tests/ -x -k omnisci

      - name: Run rbc tests
        shell: bash -l {0}
        if: ${{ ! ( matrix.os == 'ubuntu-latest' && matrix.omniscidb-from == 'docker' ) }}
        env:
          EXPECTED_PYTHON_VERSION: ${{ matrix.python-version }}
          EXPECTED_OMNISCIDB_VERSION: ${{ matrix.omniscidb-version }}
          EXPECTED_NUMBA_VERSION: ${{ matrix.numba-version }}
          RBC_TESTS_FULL: TRUE
        run: |
          mamba run -n rbc pytest -sv -r A rbc/tests/ -x -k omnisci

      - name: Show Omniscidb docker logs on failure [docker]
        shell: bash -l {0}
        if: failure() && matrix.os == 'ubuntu-latest' && matrix.omniscidb-from == 'docker'
        run: |
          mamba run -n docker docker-compose top  # to check if server is still alive
          mamba run -n docker docker-compose exec -T ls

      - name: Stop Omniscidb server [conda]
        shell: bash -l {0}
        if: matrix.os == 'ubuntu-latest' && matrix.omniscidb-from == 'conda'
        run: |
          test -f omniscidb.pid && kill -INT `cat omniscidb.pid`
          sleep 5

      - name: Show Omniscidb server output [conda]
        shell: bash -l {0}
        if: matrix.os == 'ubuntu-latest' && matrix.omniscidb-from == 'conda'
        run: |
          cat omniscidb-output.txt

      - name: Show Omniscidb docker logs on failure [docker]
        shell: bash -l {0}
        timeout-minutes: 2
        if: ${{ failure() && matrix.os == 'ubuntu-latest' && matrix.omniscidb-from == 'docker' }}
        run: |
          mamba run -n docker docker-compose logs --no-color --tail=10000 -f -t \> omniscidb-docker.log
          cat omniscidb-docker.log
